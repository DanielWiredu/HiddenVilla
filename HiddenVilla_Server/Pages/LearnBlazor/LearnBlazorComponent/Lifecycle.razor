@page "/lifecycle"
@using System.Threading

<h3>Lifecycle</h3>

<div class="border">
    <LifecycleComponent CountValue="@currentCount"></LifecycleComponent>
</div>


<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<br /> @Count <button @onclick=StartCountDown>Start Countdown</button>

<hr />
@foreach (var item in EventType)
{
    @item
    <hr />
}

@code {
    private int currentCount = 0;
    private int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }

    List<string> EventType = new List<string>();

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized is called");
    }
    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitialized Async is called");
    }
    protected override void OnParametersSet()
    {
        EventType.Add("OnParameterSet is called");
    }
    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParameterSet Async is called");
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            currentCount = 111;
        else
            currentCount = 999;

        EventType.Add("OnAfterRender is called");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync is called");
    }
    protected override bool ShouldRender()
    {
        EventType.Add("OnShouldRender is called");
        return true;
    }

    void StartCountDown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }
    void TimeCallBack(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}
